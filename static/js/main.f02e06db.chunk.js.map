{"version":3,"sources":["typing.ts","components/StyledComponents.tsx","components/Message/MessageList.tsx","components/Message/Avatar.tsx","components/Message/MessageBox.tsx","components/Message/plugins/Image.tsx","components/Message/plugins/Notification.tsx","components/Message/Bubble.tsx","components/Message/plugins/Text.tsx","components/ChatWindow/ChatWindow.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["MessageType","Box","styled","div","Button","button","Image","img","MessageListContainer","MessageList","props","children","data","messageRenders","useMemo","Children","map","element","isValidElement","match","renderMessage","message","renderer","find","it","type","cloneElement","onLayoutUpdate","onContentLayoutUpdate","console","error","ref","useRef","useCallback","current","scrollTop","scrollHeight","useEffect","id","AvatarImage","Avatar","name","charAt","MessageBoxContainer","MessageBox","className","avatarRender","author","bubbleRender","Status","FakeSizeImage","ImageLoader","url","onLoaded","useState","loading","setLoading","setError","document","createElement","addEventListener","onLoad","onError","src","removeEventListener","useImageLoader","ImagePlugin","memo","Notification","NotificationPlugin","Bubble","TextPlugin","ChatWindowContainer","ChatWindowHeader","ChatWindowMain","ChatWindowFooter","ActionButton","getImageMessage","nanoid","faker","firstName","IMAGE","Date","now","getTextMessage","TEXT","lorem","sentence","ChatWindow","Array","from","length","_","i","NOTIFICATION","messages","setMessages","onClick","prevState","App","fakeName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","GlobalStyle","createGlobalStyle","normalize","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f02e06db.chunk.js","sourcesContent":["export enum MessageType {\n  TEXT = 'TEXT',\n  IMAGE = 'IMAGE',\n  NOTIFICATION = 'NOTIFICATION'\n}\n\nexport interface MessageData {\n  id: string\n  author: string\n  type: MessageType\n  data: any\n}\n\nexport interface MessageComponentProps {\n  match: MessageType\n  message?: MessageData\n  onLayoutUpdate?: () => void\n}\n","import styled from 'styled-components'\n\nexport const Box = styled.div`\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background: #fff;\n`\n\nexport const Button = styled.button`\n  padding: 0.5rem 1rem;\n  background: #fff;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`\n\nexport const Image = styled.img`\n  max-width: 300px;\n  border-radius: 4px;\n`\n\n","import {Children, cloneElement, FC, isValidElement, useCallback, useEffect, useMemo, useRef} from 'react'\nimport styled from 'styled-components'\nimport {MessageComponentProps, MessageData} from '../../typing'\nimport {Box} from '../StyledComponents'\n\nconst MessageListContainer = styled(Box)`\n  padding: 1rem;\n  height: 500px;\n  overflow-y: auto;\n`\n\nexport const MessageList: FC<{\n  data: MessageData[]\n}> = props => {\n  const { children, data } = props\n\n  const messageRenders = useMemo(() => {\n    return Children.map(children, element => {\n      if (!isValidElement(element)) {\n        return\n      }\n      if (!element.props.match) {\n        return\n      }\n      const { match } = element.props as MessageComponentProps\n      return {\n        match,\n        element\n      }\n    })\n  }, [children])\n\n  function renderMessage(message: MessageData) {\n    const renderer = messageRenders?.find(it => it.match === message.type)\n    if (!renderer) {\n      console.error(`Message render no found: ${message.type}`)\n      return null\n    }\n    return cloneElement(renderer.element, {\n      message,\n      onLayoutUpdate: onContentLayoutUpdate\n    })\n  }\n\n  const ref = useRef<HTMLDivElement>(null)\n\n  const onContentLayoutUpdate = useCallback(() => {\n    if (ref.current) {\n      ref.current.scrollTop = ref.current.scrollHeight\n    }\n  }, [])\n\n  useEffect(() => {\n    onContentLayoutUpdate()\n  }, [data, onContentLayoutUpdate])\n\n  return (\n    <MessageListContainer ref={ref}>\n      {data.map(message => (\n        <div key={message.id}>{renderMessage(message)}</div>\n      ))}\n    </MessageListContainer>\n  )\n}\n","import {FC, ReactElement} from 'react'\nimport styled from 'styled-components'\n\nconst AvatarImage = styled.div`\n  width: 28px;\n  height: 28px;\n  background: palevioletred;\n  border-radius: 100%;\n  line-height: 28px;\n  text-align: center;\n  font-weight: 500;\n  color: #fff;\n`\n\nexport const Avatar: FC<{ name?: string; image?: ReactElement }> = props => (\n  <AvatarImage>{props.name?.charAt(0)}</AvatarImage>\n)\n","import React, {FC} from 'react'\nimport styled from 'styled-components'\nimport {Avatar} from './Avatar'\n\nconst MessageBoxContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  margin: 1rem 0;\n  \n  .avatar {\n    flex: 0 0 auto;\n    margin-right: 0.5rem;\n  }\n  .content {\n    flex: auto;\n  }\n  .author {\n    margin-bottom: 0.125rem;\n    font-size: 14px;\n    color: #777;\n  }\n  .bubble {\n    flex: auto;\n  }\n`\n\nexport const MessageBox: FC<{\n  author: string\n  bubbleRender: () => React.ReactNode\n  avatarRender?: () => React.ReactNode,\n}> = props => (\n  <MessageBoxContainer>\n    <div className='avatar'>{\n      typeof props.avatarRender === 'function'\n        ? props.avatarRender()\n        : <Avatar name={props.author} />\n    }</div>\n    <div className='content'>\n      <div className='author'>{props.author}</div>\n      <div className='bubble'>{props.bubbleRender()}</div>\n    </div>\n  </MessageBoxContainer>\n)\n","import {FC, memo, useEffect, useState} from 'react'\nimport styled from 'styled-components'\nimport {MessageComponentProps} from '../../../typing'\nimport {Image} from '../../StyledComponents'\nimport {MessageBox} from '../MessageBox'\n\nfunction useImageLoader(url: string) {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    if (!url) {\n      return\n    }\n\n    const img = document.createElement('img')\n\n    function onLoad() {\n      setLoading(false)\n    }\n\n    function onError() {\n      setError(true)\n    }\n\n    img.addEventListener('load', onLoad)\n    img.addEventListener('error', onError)\n    img.src = url\n\n    return () => {\n      img.removeEventListener('load', onLoad)\n      img.removeEventListener('error', onError)\n    }\n  }, [url])\n\n  return {loading, error}\n}\n\nconst Status = styled.div`\n  font-size: 14px;\n  color: #777;\n`\n\nconst FakeSizeImage = styled(Image)`\n  height: 225px;\n  background: #f1f1f1;\n`\n\nconst ImageLoader: FC<{ url: string; onLoaded?: () => void }> = ({ url, onLoaded }) => {\n  const {loading, error} = useImageLoader(url)\n\n  useEffect(() => {\n    if (typeof onLoaded === 'function' && !loading) {\n      onLoaded()\n    }\n  }, [loading, onLoaded])\n\n  if (error) {\n    return <Status>Failed</Status>\n  }\n\n  return (\n    <FakeSizeImage src={url} />\n  )\n}\n\nexport const ImagePlugin: FC<MessageComponentProps> = memo(props => {\n  const { message } = props\n\n  if (!message || !message.data) {\n    return null\n  }\n\n  return (\n    <MessageBox\n      author={message.author}\n      bubbleRender={() => <ImageLoader url={message.data} onLoaded={props.onLayoutUpdate} />}\n    />\n  )\n})\n","import {FC, memo} from 'react'\nimport styled from 'styled-components'\nimport {MessageComponentProps} from '../../../typing'\n\nconst Notification = styled.div`\n  margin: 0.25rem;\n  text-align: center;\n  color: #555;\n`\n\nexport const NotificationPlugin: FC<MessageComponentProps> = memo(props => {\n  const { message } = props\n\n  if (!message || !message.data) {\n    return null\n  }\n\n  return (\n    <Notification>{message.data}</Notification>\n  )\n})\n","import styled from 'styled-components'\n\nexport const Bubble = styled.div`\n  \n`\n","import {FC, memo} from 'react'\nimport {MessageComponentProps} from '../../../typing'\nimport {Bubble} from '../Bubble'\nimport {MessageBox} from '../MessageBox'\n\nexport const TextPlugin: FC<MessageComponentProps> = memo(props => {\n    const { message } = props\n\n    if (!message || !message.data) {\n      return null\n    }\n\n    return (\n      <MessageBox\n        author={message.author}\n        bubbleRender={() => <Bubble>{message.data}</Bubble>}\n      />\n    )\n  }\n)\n","import faker from 'faker'\nimport {nanoid} from 'nanoid'\nimport {FC, useState} from 'react'\nimport styled from 'styled-components'\nimport {MessageData, MessageType} from '../../typing'\nimport {MessageList} from '../Message'\nimport {ImagePlugin} from '../Message/plugins/Image'\nimport {NotificationPlugin} from '../Message/plugins/Notification'\nimport {TextPlugin} from '../Message/plugins/Text'\nimport {Box, Button} from '../StyledComponents'\n\nconst ChatWindowContainer = styled(Box)`\n  width: 600px;\n  margin: 0 auto;\n  padding: 1rem;\n  background: rgba(128, 128, 128, 0.1);\n`\nconst ChatWindowHeader = styled.div`\n  margin-bottom: 1rem;\n  font-size: 20px;\n`\nconst ChatWindowMain = styled.div`\n  margin-bottom: 0.5rem;\n`\nconst ChatWindowFooter = styled(Box)`\n  padding: 1rem;\n  display: flex;\n  justify-content: space-around;\n`\nconst ActionButton = styled(Button)``\n\nfunction getImageMessage() {\n  return {\n    id: nanoid(),\n    author: faker.name.firstName(),\n    type: MessageType.IMAGE,\n    data: `//placeimg.com/640/480/animals?t=${Date.now()}`\n  }\n}\nfunction getTextMessage() {\n  return {\n    id: nanoid(),\n    author: faker.name.firstName(),\n    type: MessageType.TEXT,\n    data: faker.lorem.sentence()\n  }\n}\n\nexport const ChatWindow: FC<{\n  name: string\n}> = props => {\n  const [messages, setMessages] = useState<MessageData[]>(() => {\n    return Array.from({ length: 10 }).map((_, i) => {\n      if (!i) {\n        return {\n          id: nanoid(),\n          author: 'NOTIFICATION',\n          type: MessageType.NOTIFICATION,\n          data: `${props.name} just created a group.`\n        }\n      }\n      if (i === 9) {\n        return getImageMessage()\n      }\n      return getTextMessage()\n    })\n  })\n\n  function sendNotification() {\n    setMessages(prevState => [\n      ...prevState,\n      {\n        id: nanoid(),\n        author: 'NOTIFICATION',\n        type: MessageType.NOTIFICATION,\n        data: `${faker.name.firstName()} has joined this group.`\n      }\n    ])\n  }\n\n  function sendText() {\n    setMessages(prevState => [...prevState, getTextMessage()])\n  }\n\n  function sendImage() {\n    setMessages(prevState => [...prevState, getImageMessage()])\n  }\n\n  return (\n    <ChatWindowContainer>\n      <ChatWindowHeader>{`${props.name}'s Group`}</ChatWindowHeader>\n      <ChatWindowMain>\n        <MessageList data={messages}>\n          <TextPlugin match={MessageType.TEXT} />\n          <ImagePlugin match={MessageType.IMAGE} />\n          <NotificationPlugin match={MessageType.NOTIFICATION} />\n        </MessageList>\n      </ChatWindowMain>\n      <ChatWindowFooter>\n        <ActionButton onClick={sendNotification}>Add a new friend</ActionButton>\n        <ActionButton onClick={sendText}>Say some thing</ActionButton>\n        <ActionButton onClick={sendImage}>Post a Sticker</ActionButton>\n      </ChatWindowFooter>\n    </ChatWindowContainer>\n  )\n}\n","import React from 'react'\nimport {ChatWindow} from './components/ChatWindow'\nimport {name as fakeName} from 'faker'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <ChatWindow name={fakeName.firstName()} />\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {createGlobalStyle} from 'styled-components'\nimport normalize from 'styled-normalize'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nexport const GlobalStyle = createGlobalStyle`\n  ${normalize}\n  body {\n    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Helvetica,Arial,sans-serif;\n    padding: 1rem;\n  }\n  div {\n    box-sizing: border-box;\n  }\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyle />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}